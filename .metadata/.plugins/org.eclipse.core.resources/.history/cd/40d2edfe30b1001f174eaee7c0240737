package com.coforge.training.securitydemo.controller;
/**
*Author        : Manthri.Sujitha
*Date          : 3 Dec 2024
*Time          : 10:05:23â€¯am
*Project Name  : security-demo
*/

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.coforge.training.securitydemo.service.UserService;



@RestController
@RequestMapping("/api")
public class UserController {
	
	private final UserService userService;
	private final AuthenticationManager authenticationManager;
	
	//DI
	public UserController(UserService userService, AuthenticationManager authenticationManager) {
		super();
		this.userService = userService;
		this.authenticationManager = authenticationManager;
	}
	
	
	@PostMapping("/register")
    public ResponseEntity<String> registerUser(@RequestBody User user) {
        userService.saveUser(user);
        return new ResponseEntity<>("User registered successfully", HttpStatus.CREATED);
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody User user) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword())
            );
            String username = authentication.getName();
            System.out.println("User " + username + " has been authenticated");
            
            return new ResponseEntity<>("User logged in successfully", HttpStatus.OK);
        } catch (AuthenticationException e) {
            return new ResponseEntity<>("Invalid username or password", HttpStatus.UNAUTHORIZED);
        }
    }

    @GetMapping("/users")
    public ResponseEntity<String> getUsers() {
        return new ResponseEntity<>("Secure Data - Accessible Only to Authenticated Users", HttpStatus.OK);
    }
	

}
